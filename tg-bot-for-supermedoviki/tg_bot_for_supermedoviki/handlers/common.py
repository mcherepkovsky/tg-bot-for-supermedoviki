from io import BytesIO

from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove, InputFile, BufferedInputFile

from filtres.role_filter import RoleFilter
from keyboards.simple_row import client_keyboard, admin_keyboard
from services.message_deleter import delete_messages
from db.database_handler import get_user_personal_qr_code


common_router = Router()


@common_router.message(
    Command(commands=["start"]),
)
async def cmd_start(message: Message, state: FSMContext):
    if await RoleFilter('Guest')(message):
        await start_message_main_guest(message, state)
    else:
        if RoleFilter('Client'):
            keyboard = client_keyboard()
        elif RoleFilter('Administrator'):
            keyboard = admin_keyboard()
        else:
            keyboard = ReplyKeyboardRemove()

        await message.reply(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é.", parse_mode='HTML')
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá",
                             reply_markup=keyboard,
                             disable_notification=True)


async def start_message_main_guest(message: Message, state: FSMContext):
    text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Super Medovik!</b> –ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å—Ä–µ–¥–∏ –Ω–∞—à–∏—Ö –≥–æ—Å—Ç–µ–π.\n\n" \
           "üéÇ –£ –Ω–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º–∏ –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –≤–∫—É—Å–∞–º–∏ –º–µ–¥–æ–≤–∏–∫–æ–≤, –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é –ø–æ —Å–æ–≤–µ—Ç—Å–∫–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É. " \
           "–ê —Ç–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞—à –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∫–æ—Ñ–µ –∏ —á–∞—è.\n\n" \
           "üí≥ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏! " \
           "–û—Ç–º–µ—Ç—å—Ç–µ <b>7 —á–∞—à–µ–∫ –∫–æ—Ñ–µ</b> <i>(–∏—Å–∫–ª—é—á–∞—è –∫–æ—Ñ–µ –∑–∞ 2 —Ä—É–±.)</i>, –∏ –ø–æ–ª—É—á–∏—Ç–µ 8-–π –∫–æ—Ñ–µ –∏–ª–∏ –º–µ–¥–æ–≤–∏–∫ <b>–≤ –ø–æ–¥–∞—Ä–æ–∫</b>!"

    keyboard_remove = ReplyKeyboardRemove()

    await message.answer(
        text=text,
        parse_mode='HTML',
        reply_markup=keyboard_remove
    )

    await state.update_data(
        tg_id=message.from_user.id,
        tg_username=message.from_user.username
    )
    user_data = await state.get_data()

    caption = "üîó –í–æ—Ç –≤–∞—à–∞ –±–æ–Ω—É—Å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å QR-–∫–æ–¥–æ–º, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ:"

    await send_user_qr_code(message, user_data, caption)

    text = "üìç <b>–ù–∞—à–∏ –∞–¥—Ä–µ—Å–∞: </b>\n" \
           "‚Ä¢ –Ø–∫—É–±–∞ –ö–æ–ª–∞—Å–∞, 25/1\n" \
           "‚Ä¢ –õ–æ–∂–∏–Ω—Å–∫–∞—è, 22 - 2\n" \
           "‚Ä¢ –£–º–∞–Ω—Å–∫–∞—è, 54 (–¢–¶ ¬´–ì–ª–æ–±–æ¬ª)\n\n" \
           "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–∞—Å! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ —á–∞–µ–ø–∏—Ç–∏—è! üç∞‚òï"

    await message.answer(
        text=text,
        parse_mode='HTML',
        reply_markup=client_keyboard()
    )


async def send_user_qr_code(message, user_data, caption):
    # –ü–æ–ª—É—á–∞–µ–º QR-–∫–æ–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    qrCode = await get_user_personal_qr_code(user_data)
    if qrCode:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∞–π—Ç—ã –≤ InputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
        photo = BufferedInputFile(qrCode, filename='qr_code.png')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
        await message.answer_photo(
            photo=photo,
            caption=caption,
            show_caption_above_media=True,
            disable_notification=True,
            parse_mode='HTML'
        )
    else:
        await message.reply("QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")



async def handle_unhandled_message(message: Message):
    message_ids_to_delete = [message.message_id - i for i in range(1)]
    await delete_messages(message.chat.id, message_ids_to_delete)


async def start_message_main_client(message: Message):
    await message.answer(
        text=f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ <b>–ì–ª–∞–≤–Ω–æ–º –º–µ–Ω—é</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá",
        parse_mode='HTML',
        reply_markup=client_keyboard()
    )


async def start_message_main_admin(message: Message):
    await message.answer(
        text=f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ <b>–ì–ª–∞–≤–Ω–æ–º –º–µ–Ω—é</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá",
        parse_mode='HTML',
        reply_markup=admin_keyboard()
    )
