from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext

from db.database_handler import get_user_personal_qr_code
from aiogram.types import Message
from keyboards.simple_row import make_row_inline_keyboard_mutiple, make_row_inline_keyboard, menu_keyboard
from config_reader import config, menu_data
from services.sender import send_qr_code_to_client

client_router = Router()


@client_router.message(F.text.lower() == "üí≥ –º–æ—è –∫–∞—Ä—Ç–∞")
async def send_user_qr_code(
        message: Message,
        state: FSMContext,
        caption = "üîó –í–æ—Ç –≤–∞—à–∞ –±–æ–Ω—É—Å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å QR-–∫–æ–¥–æ–º, –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ:"
    ):
    await state.update_data(
        tg_id=message.from_user.id,
        tg_username=message.from_user.username
    )
    user_data = await state.get_data()

    # –ü–æ–ª—É—á–∞–µ–º QR-–∫–æ–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    qrCode = await get_user_personal_qr_code(user_data)

    if qrCode:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
        await send_qr_code_to_client(message.from_user.id, caption, qrCode)
    else:
        await message.reply("QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@client_router.message(F.text.lower() == "üìã –º–µ–Ω—é")
async def send_menu(message: Message):
    keyboard_items = menu_keyboard()
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –Ω–∞—à–µ–≥–æ –º–µ–Ω—é:",
        parse_mode='HTML',
        reply_markup=make_row_inline_keyboard_mutiple(keyboard_items)
    )


async def get_menu(message: Message, category):
    keyboard_items = [
        [{'text': 'üëà',
          'callback_data': f"getLeftCategory_{category}"},
         {'text': 'üëâ',
          'callback_data': f"getRightCategory_{category}"}
         ],
        [{'text': 'üíÅ‚Äç‚ôÇÔ∏è –ù–∞–∑–∞–¥ üíÅ‚Äç‚ôÄÔ∏è',
          'callback_data': "getBackToMenu"}
         ]
    ]

    items = menu_data.get("menu", {}).get(category, [])

    if items:
        response = f"–ú–µ–Ω—é –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category}</b>:\n"
        for item in items:
            response += f"‚Ä¢ <i>{item['–Ω–∞–∑–≤–∞–Ω–∏–µ']}</i> "
            if '—Ü–µ–Ω—ã' in item:
                response += f"\n"
                for size, price in item['—Ü–µ–Ω—ã'].items():
                    response += f" ‚Äî {size.capitalize()} - {price} —Ä—É–±.\n"
            else:
                response += f"{item['—Ü–µ–Ω–∞']} —Ä—É–±.\n"

        await message.edit_text(
            text=response,
            parse_mode='HTML',
            reply_markup=make_row_inline_keyboard_mutiple(keyboard_items)
        )
    else:
        keyboard_items = [
            {'text': '‚ÄçüíÅ‚Äç‚ôÇÔ∏è –ù–∞–∑–∞–¥ üíÅ‚Äç',
             'callback_data': "getBackToMenu"},
        ]

        await message.edit_text(
            text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –ø–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç–∞.",
            parse_mode='HTML',
            reply_markup=make_row_inline_keyboard(keyboard_items)
        )


@client_router.callback_query(lambda c: c.data and c.data.startswith(('getRightCategory_', 'getLeftCategory_')))
async def get_next_category(callback: types.CallbackQuery):
    await callback.answer()
    action, current_category = callback.data.split('_')

    categories = {1: "–ú–µ–¥–æ–≤–∏–∫–∏", 2: "–î–µ—Å–µ—Ä—Ç—ã", 3: "–ö–æ—Ñ–µ", 4: "–ù–µ–∫–æ—Ñ–µ", 5: "–ß–∞–π", 6: "–¢–æ—Ä—Ç—ã –Ω–∞ –∑–∞–∫–∞–∑", 7: "–î–æ–±–∞–≤–∫–∏"}

    # –ü–æ–∏—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
    current_index = None
    for index, name in categories.items():
        if name == current_category:
            current_index = index
            break

    next_category = categories[1]

    if action == "getRightCategory":
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if current_index is not None:
            next_index = current_index + 1
            if next_index in categories:
                next_category = categories[next_index]
    elif action == "getLeftCategory":
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if current_index is not None:
            next_index = current_index - 1
            if next_index in categories:
                next_category = categories[next_index]

    await get_menu(callback.message, next_category)


@client_router.callback_query(F.data == "getBackToMenu")
async def get_medoviki(callback: types.CallbackQuery):
    keyboard_items = menu_keyboard()
    await callback.answer()
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –Ω–∞—à–µ–≥–æ –º–µ–Ω—é:",
        parse_mode='HTML',
        reply_markup=make_row_inline_keyboard_mutiple(keyboard_items)
    )


@client_router.callback_query(F.data == "getMedoviki")
async def get_medoviki(callback: types.CallbackQuery):
    await callback.answer()
    await get_menu(callback.message, "–ú–µ–¥–æ–≤–∏–∫–∏")


@client_router.callback_query(F.data == "getDesserts")
async def get_desserts(callback: types.CallbackQuery):
    await callback.answer()
    await get_menu(callback.message, "–î–µ—Å–µ—Ä—Ç—ã")


@client_router.callback_query(F.data == "getCoffe")
async def get_coffe(callback: types.CallbackQuery):
    await callback.answer()
    await get_menu(callback.message, "–ö–æ—Ñ–µ")


@client_router.callback_query(F.data == "getNekofe")
async def get_nekofe(callback: types.CallbackQuery):
    await callback.answer()
    await get_menu(callback.message, "–ù–µ–∫–æ—Ñ–µ")


@client_router.callback_query(F.data == "getTea")
async def get_tea(callback: types.CallbackQuery):
    await callback.answer()
    await get_menu(callback.message, "–ß–∞–π")


@client_router.callback_query(F.data == "getCakesToOrder")
async def get_cakes_to_order(callback: types.CallbackQuery):
    await callback.answer()
    await get_menu(callback.message, "–¢–æ—Ä—Ç—ã –Ω–∞ –∑–∞–∫–∞–∑")


@client_router.callback_query(F.data == "getAdditives")
async def get_additives(callback: types.CallbackQuery):
    await callback.answer()
    await get_menu(callback.message, "–î–æ–±–∞–≤–∫–∏")
